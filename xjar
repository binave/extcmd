#!/bin/bash

__xj_unset() {
    # clear environment variables
    unset $(set | awk -F = '/^(XJ|xj)_[0-9A-Za-z_]+=/{printf " " $1}')
}

__xj_test_command() {
    which $1 >/dev/null 2>&1 && return 0;
    printf "[\033[1;31mERROR\033[0m] '%s' command \033[31mnot\033[0m found or \033[31mnot\033[0m in '\$PATH'\n" $1 >&2;
    return 1;
}

__xj_test_workspace() {
    [ -s "$xj_jar_path" ] && return 0;
    printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' not work directory.\n" "$PWD" >&2;
    exit 1
}

__xj_test_single_process() {
    [ "${xj_java_pid/[^0-9]/}" == "$xj_java_pid" ] && return 0;
    printf "name:\033[1m%-26s\033[0m [\033[1;31mERROR\033[0m] not single process. pid: \033[1m%s\033[0m\n" $xj_jar_name, "${xj_java_pid//[^0-9]/ }" >&2;
    exit 1
}

__xj_unset;
[ -s "startup.properties" ] && \
    eval $(awk -F \# '$1 ~ /=/{gsub(/^[[:space:]]+|[[:space:]]+$/, "", $1); print "export XJ_" $1}' "startup.properties");
eval $(set | awk '/^[A-Z_]+=[^(][^*]{,128}$/{print "export XJ_" $0}');

if [ "$XJ_JAR_LOG_DIR" ]; then
    :
elif [ "$XJ_JAR_LOG_DIR_PRE" ]; then
    XJ_JAR_LOG_DIR="${XJ_JAR_LOG_DIR_PRE%/}/${PWD##*/}/${XJ_JAR_LOG_DIR_SUF#/}";
    XJ_JAR_LOG_DIR="${XJ_JAR_LOG_DIR%/}";
else
    XJ_JAR_LOG_DIR="$PWD/logs"
fi
: ${XJ_LIVE_LOG_DIR:="${XJ_JAR_LOG_DIR%/*}"};

for xj_jar_path in "$PWD/"*.jar; do :; done
xj_jar_path="${xj_jar_path/*\**/}"; # jar file not found
xj_jar_path="${xj_jar_path/'-sources.'/.}";
xj_jar_path="${xj_jar_path/'-src.'/.}";

[ -s "$xj_jar_path" ] && {
    xj_jar_name="${xj_jar_path##*/}";
    xj_jar_name="${xj_jar_name%.*}";
    # xj_args_file="$XJ_JAR_LOG_DIR/$xj_jar_name.args";
    xj_jar_dir="${xj_jar_path%/*}/";
    xj_java_pid=$(ps -ef | awk '/'"${xj_jar_dir//\//\\/}"'.*\.jar/ && !/awk/{print $2}');
    [ "$XJ_LOG_PREFIX" ] && {
        # man date
        [ "$XJ_LOG_PREFIX" == "${XJ_LOG_PREFIX/\%[A-DF-IMNPR-Za-eghj-npr-z]/}" -a "$XJ_LOG_PREFIX" == "${XJ_LOG_PREFIX/\%-[A-DF-IMNPR-Za-eghj-npr-z]/}" ] && {
            printf "[\033[1;31mERROR\033[0m] \033[1mLOG_PREFIX\033[0m invalid option: '\033[33m%s\033[0m' in '\033[32m%s\033[0m'\n" "$XJ_LOG_PREFIX" "startup.properties" >&2;
            exit 1

        };
        xj_jar_log_prefix='strftime("'"$XJ_LOG_PREFIX"'"), $0'; # for awk

    };
};

case $1 in
    start)
        __xj_test_command java || exit 1;
        __xj_test_command netstat || :;
        __xj_test_workspace;
        __xj_test_single_process;
        [ "$xj_java_pid" ] && { printf "name:\033[1m%-26s\033[0m is running.\n" $xj_jar_name; exit 1; } >&2;
        shift;
        case $1 in
            "") :;;
            --debug|-D)
                [ "$2" ] && xj_port=$2 || xj_port=$XJ_DEBUG_PORT;
                [ "$xj_port" ] || {
                    printf "[\033[1;31mERROR\033[0m] DEBUG_PORT \033[31mnot\033[0m set\n" >&2;
                    exit 1

                };

                XJ_JAVA_ARGS+=" -Xdebug";
                XJ_JAVA_ARGS+=" -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$xj_port";
                unset xj_port

            ;;
            *)
                printf "[\033[1;31mERROR\033[0m] Invalid option: start '\033[33m%s\033[0m'\n" "$1" >&2;
                exit 1

            ;;
        esac

        mkdir -pv $XJ_JAR_LOG_DIR;
        # echo "$@" > "$xj_args_file";
        xj_jar_log_dir_prefix="$XJ_JAR_LOG_DIR/$xj_jar_name";
        set -- $XJ_JAVA_ARGS -jar "$xj_jar_path" $XJ_JAR_ARGS;
        (
            # clear sub environment variables
            __xj_unset;
            # clear functions
            unset $(set | awk '/^__xj_[0-9A-Za-z_]+[[:space:]]*\(/{printf " " $1}');
            # main
            nohup < /dev/null java "$@" 2>&1 &
            # open port
            xj_java_pid=$!;
            {
                firewall-cmd --state >/dev/null 2>/dev/null || exit 1;
                which netstat >/dev/null 2>/dev/null || exit 1;
                {
                    firewall-cmd --list-port;
                    netstat -lnp;
                } | awk 'BEGIN{update=""};{
                    if (/\/(tc|ud)p/) {
                        for (i=1; i<=NF; i++) port[$i]++

                    } else if (/[^0-9]'$xj_java_pid'\/java/) {
                        sub(/.*:/, "", $4);
                        sub(/[46]$/, "", $1);
                        if (!port[$4 "/" $1]) {
                            update="true";
                            printf "open port \033[1m%s\033[0m/%s ", $4, $1;
                            system("firewall-cmd --zone=public --add-port=" $4 "/" $1 " --permanent;");

                        } # else printf "port \033[1m%s\033[0m/%s already open.\n", $4, $1

                    }
                }
                END{if(update) system("firewall-cmd --reload >/dev/null")}'
                # firewall-cmd --zone=public --remove-port=$port/$proto --permanent
            } &

        ) | sed -ru 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]|\r//g' | \
            awk -v dir_prefix="$xj_jar_log_dir_prefix" '{print '"${xj_jar_log_prefix}"' >> strftime(dir_prefix "_%Y%m%d.log");fflush(stdout)}' >/dev/null &

        [ "$HISTCONTROL" -a ! "$TEAMCITY_VERSION" ] && {
            xj_jar_log_file="$(date +${xj_jar_log_dir_prefix}_%Y%m%d.log)";
            printf "\033[34mjava %s\033[0m >> \033[32m%s\033[0m 2>&1 &\n" "$*" $xj_jar_log_file;
            tail -F -n 0 "$xj_jar_log_file" 2>/dev/null

        }

    ;;
    log)
        __xj_test_workspace;
        shift;
        [ "$1" == "${1/-[0-9]/}" ] || set -- ${2:-10} $1;
        xj_jar_log_file="$(date -d "${2:-0} days" +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";

        if [ "$HISTCONTROL" -a ! "$TEAMCITY_VERSION" ] && [ ! "$2" ]; then
            set -- -F -n ${1:-10};

        else
            set -- -n ${1:-10};
            printf "\n"

        fi

        printf "==> \033[32m%s\033[0m <==\n" $xj_jar_log_file;
        tail $@ "$xj_jar_log_file" 2>/dev/null

    ;;
    stop)
        __xj_test_workspace;
        [ "$xj_java_pid" ] || { printf "name:\033[1m%-26s\033[0m not running.\n" $xj_jar_name; exit 1; } >&2;
        kill -9 $xj_java_pid;
        sleep 0.5;
        xj_wait_limit=10;
        while ps -p $xj_java_pid >/dev/null; do
            sleep 1;
            [ $((xj_wait_limit--)) -le 0 ] && {
                printf "[\033[1;31mERROR\033[0m] kill '\033[1m%s\033[0m' faild, pid: \033[1m%s\033[0m\n" $xj_jar_name $xj_java_pid >&2;
                exit 1
            };

        done
        unset xj_wait_limit;

    ;;
    restart)
        __xj_test_command java || exit 1;
        __xj_test_workspace;
        shift;
        # xj_tmp_args=$(cat "$xj_args_file" 2>/dev/null);
        # [ ! "$1" ] && [ "$xj_tmp_args" ] && set -- $xj_tmp_args;
        # unset xj_tmp_args;
        bash "$0" stop;
        bash "$0" start "$@"

    ;;
    status|"")
        __xj_test_workspace;
        __xj_test_single_process;
        if [ "$xj_java_pid" ]; then
            printf "name:\033[1m%-26s\033[0m pid:\033[1m%-6s\033[0m %-23s" $xj_jar_name, $xj_java_pid, \
            $(which netstat >/dev/null 2>&1 && netstat -lnp 2>/dev/null | awk '/[^0-9]'$xj_java_pid'\/java/{if(!e++) printf " port:"; sub(/.*:/, "", $4); sub(/[46]$/, "", $1); printf "\033[1m%s/%s\033[0m,", $4, $1}');
            top -b -n 1 -p$xj_java_pid | tac | awk '{if($0 ~ /^KiB Mem/){printf " (\033[1m%.2f\033[0m/\033[1m%.0f\033[0mg)\n", ($8/1024/1024), ($4/1024/1024)} else if($0 ~ /java/){b[""]=1;b["m"]=1024;b["g"]=(1024*1024);s=$6;sub(/[gm]/, "", $6);sub(/[0-9\.]+/, "", s);printf " cpu:\033[1m%-6s\033[0m mem:\033[1m%-8s\033[0m", $9 "%,", sprintf("%.2f", $6*b[s]/1024/1024) "g" }}';

        else
            printf "name:\033[1m%-26s\033[0m inactive (\033[31mdead\033[0m).\n" $xj_jar_name, >&2;
            exit 1
        fi

    ;;
    live)
        {
            __xj_test_command java || exit 1;
            mkdir -pv "$XJ_LIVE_LOG_DIR";
            __xj_test_workspace;
            if [ "$xj_java_pid" -a "${xj_java_pid/[^0-9]/}" == "$xj_java_pid" ]; then
                # print every 10 minutes
                [ $((1`date +%M` % 10)) == 0 ] && printf "%s\n" live

            else
                printf "restart: ";
                free -h | awk '/Mem:/{printf "u/a: %s/%s\n", $3, $2}';
                export TEAMCITY_VERSION=none HISTCONTROL=;
                nohup < /dev/null bash "$0" restart >/dev/null 2>&1 &

            fi
        } 2>&1 | awk -v dir_prefix="$XJ_LIVE_LOG_DIR" -v arg_name=$xj_jar_name \
                '{printf "%s, %-26s %s\n" ,strftime("%F %T"), arg_name ",", $0 >> strftime(dir_prefix "/live_%Y%m%d.log");fflush(stdout)}'

    ;;
    --dir|-d)
        shift;
        [ -d "$1" ] || {
            printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' directory must exist.\n" $1 >&2;
            exit 1
        };
        # all case
        __args__=$(awk -F \) '/^[[:space:]]*[A-Za-z|-]+)/{gsub(/\|/, " ", $1); printf " %s ", $1}' "$0");
        # make sure path exist and not match case
        while [ -d "$1" -a "${__args__/ $1 /}" == "$__args__" ]; do __dir__[${#__dir__[@]}]="$1"; shift; done
        unset __args__;
        export TEAMCITY_VERSION=none HISTCONTROL=;
        while read __sh__; do
            (
                cd "`dirname "$__sh__"`";
                unset __dir__ __sh__;
                bash "$0" "$@"
            )
        done < <(find "${__dir__[@]}" -type f -name startup.properties);
        unset __dir__ __sh__

    ;;
    *)
        printf "[\033[31mERROR\033[0m] invalid option '\033[33m$1\033[0m'.

usage: ${0##*/} [--dir|-d PATH[PATH...]] [option]
    start   [--debug|-D [port]] start jar if not run.
    stop                        stop jar process.
    log     [lines|-[days]]     print last n lines and n days before log.
    restart [--debug|-D [port]] restart jar process.
    status                      show process info.
    live                        start jar if not run,
                                and logging live every 10 minutes.

config file:
    cat > \033[32m./startup.properties\033[0m <<-EOF\033[7m
# JAR_LOG_DIR=/var/log/xxx/console; # Deprecated
JAR_LOG_DIR_PRE=/var/log;
JAR_LOG_DIR_SUF=/console;
# LOG_PREFIX='%%F %%T,'
LIVE_LOG_DIR=/var/log/live;
DEBUG_PORT=9000;
JAR_ARGS=' --config.location=./application.yml'
JAR_ARGS+=' --prefix=/xxx'
JAVA_ARGS=' -Xmx1024m'
JAVA_ARGS+=' -Xms1024m'
\033[0mEOF

e.g.
    ssh user@hostname 'export PATH=\$PATH:\$HOME/bin; xjar -d \$JAR_DIR1 \$JAR_DIR2 restart'
    ssh user@hostname 'cd \$JAR_DIR; export PATH=\$PATH:\$HOME/bin; xjar restart; sleep 30; xjar || { xjar log -0 100; exit 1; }'

" >&2

    ;;
esac
