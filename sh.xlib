#!/bin/sh
#   Copyright 2021 bin jin
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# variable map
#   env:
#       VARIABLE_MAP*_PREFIX_*
#
# Usage: __variable_map [[pool]] [option] [arguments]
#
# option:
#    --put     [key] [value]      put key value in map
#    --append  [key] [value]      append value by key in map
#    --incrby  [key] [integer]    increment by key (atomic integer)
#    --get     [key]              print value by key
#    --remove  [key]              remove value by key
#    --size                       get map size
#    --clear                      clear map
#    --keys                       list keys by pool
__variable_map () {
    [ "$1" ] || return 1;
    __vmap_encode() {
        local char idx key;
        if [ "${1//[0-9A-Za-z_]/}" == "" ]; then
            key="$1"
        else
            for idx in `seq 0 ${#1}`; do
                char="${1:$idx:1}"; [ "${char/[0-9A-Za-z_]/}" == "" ] && { key=$key$char; } || key=$key`printf _x%dx "'$char"`;
            done
        fi
        printf %s "$key"
    }

    __vmap_decode() {
        local asci len skip=0;
        for idx in `seq 0 ${#1}`; do
            [ $((--skip)) -gt 0 ] && continue;
            [ "${1:$idx:2}" == "_x" ] && {
                if [ "${1:$idx+4:1}" == "x" ]; then len=2; elif [ "${1:$idx+5:1}" == "x" ]; then len=3; else unset len; fi
                [ "$len" ] && { asci=${1:$idx+2:$len}; [ "${asci//[0-9]/}" == "" ] && { printf \\x`printf %x $asci`; skip=$((len+3)); continue; } }
            }
            printf %s ${1:$idx:1}
        done
    }

    local key pool value;
    [ "${1:0:2}" == "--" ] || { pool=_`__vmap_encode "$1"`; shift; };
    key=`__vmap_encode "$2"`;
    value="$3";
    case $1 in
        --put) [ "$value" ] && eval VARIABLE_MAP${pool}_PREFIX_$key=\"\$value\";;
        --incrby) [ "$value" ] && eval ": \$((VARIABLE_MAP${pool}_PREFIX_$key += $value))";;
        --append) [ "$value" ] && eval VARIABLE_MAP${pool}_PREFIX_$key=\"\$VARIABLE_MAP${pool}_PREFIX_$key\$value\";;
        --get) [ "$key" ] && eval printf %s \"\$VARIABLE_MAP${pool}_PREFIX_$key\";;
        --remove) [ "$key" ] && unset VARIABLE_MAP${pool}_PREFIX_$key;;
        --size) printf %d $(set | grep -c '^VARIABLE_MAP'${pool}_PREFIX_);;
        --clear) unset `set | awk -F '=' '/^VARIABLE_MAP'${pool}'_PREFIX_/{printf " " $1}'`;;
        --keys) for key in `set | awk -F '_PREFIX_|=' '/^VARIABLE_MAP'${pool}'_PREFIX_/{printf " " $2}'`; do printf "%s\n" `__vmap_decode $key`; done;;
        *) printf "%s\033[31m%s\033[0m%s\n" "[MAP:ERROR] invalid option: " "$1" >&2; return 1;;
    esac

}
